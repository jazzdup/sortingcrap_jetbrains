type: edu
custom_name: stage4
files:
- name: src/sorting/Main.java
  visible: true
  text: |
    package sorting;

    import java.util.*;

    public class Main {
        public static void main(final String[] args) {
            Scanner scanner = new Scanner(System.in);

            while (scanner.hasNextLong()) {
                long number = scanner.nextLong();
                // write your code here
            }
        }
    }
  learner_created: false
- name: src/sorting/DataType.java
  visible: true
  text: |
    package sorting;

    public enum DataType {
        LONG("long"),
        LINE("line"),
        WORD("word"),
        NUMBER("number");
        String text;
        DataType(String text) {
            this.text = text;
        }
    }
  learner_created: true
- name: src/sorting/LineStrategy.java
  visible: true
  text: |
    package sorting;

    import java.util.ArrayList;
    import java.util.Comparator;
    import java.util.List;
    import java.util.Scanner;

    public class LineStrategy extends AbstractStrategy {
        @Override
        public void execute() {
            List<String> items = new ArrayList<>();
            try (Scanner scanner = new Scanner(System.in)) {
                while (scanner.hasNextLine()) {
                    items.add(scanner.nextLine());
                }
            }
            totalNumbers = items.size();
            max = items.stream().sorted().max(Comparator.comparingInt(s -> s.length())).orElseThrow();
            timesMax = (int) items.stream().filter(s -> s.length() == ((String)max).length()).count();
            percentMax = (int) ((timesMax / (double) totalNumbers) * 100);
            dataType = DataType.LINE.text;
        }

        @Override
        public void printStats() {
            System.out.println(String.format("Total %ss: %d", dataType, totalNumbers));
            System.out.println(String.format("The longest %s:\n%s\n(%d time(s), %d%%)", dataType, max, timesMax,
                    percentMax));

        }
    }
  learner_created: true
- name: src/sorting/LongStrategy.java
  visible: true
  text: |
    package sorting;

    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.List;
    import java.util.Scanner;

    public class LongStrategy extends AbstractStrategy {
        protected List<Long> items = new ArrayList<>();

        @Override
        public void execute() {
            try (Scanner scanner = new Scanner(System.in)) {
                while (scanner.hasNextLong()) {
                    long number = scanner.nextLong();
                    items.add(number);
                }
            }
            totalNumbers = items.size();
            max = Collections.max(items);
            timesMax = (int) items.stream().filter(i -> i == max).count();
            percentMax = (int) ((timesMax / (double) totalNumbers) * 100);
            dataType = DataType.LONG.text;
        }
    }
  learner_created: true
- name: src/sorting/Context.java
  visible: true
  text: |
    package sorting;

    public class Context {
        Strategy strategy;
        SortDirection sortDirection;

        public void invoke() {
            strategy.execute();
            strategy.printStats();
        }

        public void setStrategy(DataType dataType, SortIntegers sortIntegers) {
            if (sortIntegers.equals(SortIntegers.YES)) {
                strategy = new SortIntegersStrategy();
                return;
            }
            switch (dataType) {
                case LINE:
                    strategy = new LineStrategy();
                    break;
                case LONG:
                    strategy = new LongStrategy();
                    break;
                case WORD:
                    strategy = new WordStrategy();
            }
        }

    }
  learner_created: true
- name: src/sorting/WordStrategy.java
  visible: true
  text: |
    package sorting;

    import java.util.Comparator;
    import java.util.List;
    import java.util.Scanner;
    import java.util.stream.Collectors;

    public class WordStrategy extends AbstractStrategy {
        @Override
        public void execute() {
            List<String> items = null;
            try (Scanner scanner = new Scanner(System.in)) {
                items = scanner.tokens().collect(Collectors.toList());
            }
            totalNumbers = items.size();
            max = items.stream().sorted().max(Comparator.comparingInt(s -> s.length())).orElseThrow();
            timesMax = (int) items.stream().filter(s -> s.length() == ((String)max).length()).count();
            percentMax = (int) ((timesMax / (double) totalNumbers) * 100);
            dataType = DataType.WORD.text;
        }
    }
  learner_created: true
- name: src/sorting/Strategy.java
  visible: true
  text: |
    package sorting;

    public interface Strategy {
        void execute();
        void printStats();
    }
  learner_created: true
- name: src/sorting/AbstractStrategy.java
  visible: true
  text: |
    package sorting;

    public abstract class AbstractStrategy implements Strategy {
        int totalNumbers;
        Object max;
        int timesMax;
        int percentMax;
        String dataType;

        public abstract void execute();
        public void printStats() {
            System.out.println(String.format("Total %ss: %d", dataType, totalNumbers));
            System.out.println(String.format("The greatest %s: %s (%d time(s), %d%%)", dataType, max, timesMax,
                    percentMax));
        }
    }
  learner_created: true
- name: src/sorting/SortDirection.java
  visible: true
  text: |
    package sorting;

    public enum SortDirection {
        ASC, DESC, NONE;
    }
  learner_created: true
- name: src/sorting/SortWordStrategy.java
  visible: true
  learner_created: true
- name: src/sorting/SortingType.java
  visible: true
  text: |
    package sorting;

    public enum SortIntegers {
        YES, NO;
    }
  learner_created: true
- name: test/common/SortingToolStage4Test.kt
  visible: false
  text: |+
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import org.hyperskill.hstest.testing.Settings
    import java.util.*

    class SortingToolStage4Test : StageTest<SortingToolClue>() {

        init {
            Settings.allowOutOfInput = true
        }

        override fun generate(): List<TestCase<SortingToolClue>> {
            return stage4Tests()
        }

        override fun check(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "byCount" in clue.args -> checkByCount(reply, clue)
                else -> checkNatural(reply, clue)
            }
        }

        private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)
                "word" in clue.args -> checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)
                "line" in clue.args -> checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)
                "word" in clue.args -> checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)
                "line" in clue.args -> checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }
    }

    fun stage4Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long", "-sortingType", "natural"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "long"
                )
        )
    }



    fun revealRawTest(clue: SortingToolClue, reply: String): String {
        return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
    }

    class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)

    fun createTest(
            consoleInput: String,
            revealTest: Boolean,
            vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
                .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
                .setInput(consoleInput)
                .addArguments(*args)
    }

    fun parseLongTokens(input: String): List<Int> {
        val scanner = Scanner(input)

        val longTokens = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            longTokens.add(scanner.nextInt())
        }

        return longTokens
    }

    fun parseWordTokens(input: String): List<String> {
        val scanner = Scanner(input)

        val wordTokens = mutableListOf<String>()

        while (scanner.hasNext()) {
            wordTokens.add(scanner.next())
        }

        return wordTokens
    }

    fun parseLineTokens(input: String): List<String> {
        return input.lines()
    }

    fun <TokenType : Comparable<TokenType>> checkNatural(
            actualTokens: List<TokenType>,
            sortedTokensParser: (String) -> List<TokenType>,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 2) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output: expected 2 lines.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 2 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val sortedActualTokens = actualTokens.sorted()

        val sortedTokens = sortedTokensParser(lines[1].substringAfter(":").dropWhile { it in setOf('\n', '\r') })

        val total = sortedTokens.size

        if (actualTotal != total) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total sorted tokens are incorrect.")
            }
        }

        if (sortedActualTokens != sortedTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Sorted tokens are incorrect.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Sorted tokens are incorrect.")
            }
        }

        return CheckResult(true)
    }

    fun <TokenType : Comparable<TokenType>> checkByCount(
            actualTokens: List<TokenType>,
            tokenParser: (String) -> TokenType,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val tokenToCount = mutableMapOf<TokenType, Int>()

        for (token in actualTokens) {
            tokenToCount[token] = (tokenToCount[token] ?: 0) + 1
        }

        val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))
        val linesWithTokens = lines.drop(1)

        if (actualSortedByCount.size != linesWithTokens.size) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Lines with tokens are incorrect.")
            }
        }

        for ((lineId, line) in linesWithTokens.withIndex()) {
            val token = tokenParser(line.substringBefore(':'))
            val info = line.substringAfter(':')

            val (actualToken, actualTimes) = actualSortedByCount[lineId]

            if (token != actualToken) {
                return if (clue.revealTest) {
                    CheckResult(
                            false,
                            "Token ($token) is incorrect. Expected: $actualToken.\n" +
                                    revealRawTest(clue, reply)
                    )
                } else {
                    CheckResult(false, "Token is incorrect.")
                }
            }

            // TODO: check info (times and percentage)
        }

        return CheckResult(true)
    }


  learner_created: false
- name: src/sorting/SortNumbersStrategy.java
  visible: true
  text: |
    package sorting;

    import java.util.Collections;
    import java.util.stream.Collectors;

    public class SortIntegersStrategy extends LongStrategy {
        @Override
        public void execute() {
            super.execute();
            Collections.sort(items, Long::compareTo);
        }

        @Override
        public void printStats() {
            String dataType = DataType.NUMBER.text;;
            String itemsString = items.stream().map(i -> i.toString()).collect(Collectors.joining(" "));
            System.out.println(String.format("Total %ss: %d", dataType, totalNumbers));
            System.out.println(String.format("Sorted data:%s", itemsString));
        }
    }
  learner_created: true
- name: src/sorting/SortNumbersByCountStrategy.java
  visible: true
  learner_created: true
- name: src/sorting/SortWordByCountStrategy.java
  visible: true
  learner_created: true
- name: src/sorting/SortLineByCountStrategy.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5384#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 09 Dec 2021 15:14:37 UTC
record: 4
